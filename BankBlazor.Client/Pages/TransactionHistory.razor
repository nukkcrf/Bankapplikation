@page "/transaction-history-view"
@using BankBlazor.Client.Models
@inject HttpClient Http

<h3>Transaction History View</h3>

<div class="mb-3">
    <label for="accountIdInput" class="form-label">Enter Account ID:</label>
    <input type="number" id="accountIdInput" class="form-control" @bind="accountId" min="1" />
    <button class="btn btn-primary mt-2" @onclick="FetchTransactions" disabled="@(!accountId.HasValue || accountId <= 0)">View Transactions</button>
</div>

@if (transactions != null && transactions.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Type</th>
                <th>Operation</th>
                <th>Amount</th>
                <th>Balance</th>
                <th>Bank</th>
                <th>Related Account</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Operation</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Balance</td>
                    <td>@(transaction.Bank ?? "N/A")</td>
                    <td>@(transaction.Account ?? "N/A")</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <p>Please enter an account ID and click View Transactions.</p>
}

<!-- Link back to homepage -->
<div class="mt-3">
    <a href="/" class="btn btn-link">Back to Home</a>
</div>

@code {
    private int? accountId;
    private List<TransactionDto> transactions;
    private string? errorMessage;

    private async Task FetchTransactions()
    {
        if (accountId.HasValue && accountId > 0)
        {
            try
            {
                var response = await Http.GetAsync($"api/transactionhistory/{accountId.Value}");
                if (response.IsSuccessStatusCode)
                {
                    transactions = await response.Content.ReadFromJsonAsync<List<TransactionDto>>();
                    errorMessage = null;
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    transactions = null;
                    errorMessage = "No transactions found for this account.";
                }
                else
                {
                    transactions = null;
                    errorMessage = "An error occurred while fetching transaction history.";
                }
            }
            catch (Exception)
            {
                transactions = null;
                errorMessage = "An error occurred while fetching transaction history.";
            }
        }
    }
}