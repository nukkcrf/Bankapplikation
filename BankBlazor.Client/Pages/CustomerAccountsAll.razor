@page "/show_all_accounts"
@using BankBlazor.Client.Models
@inject HttpClient Http

<h3>All Bank Accounts</h3>

@if (pagedResult == null)
{
    <p>Loading...</p>
}
else
{
    <!-- Dropdown for selecting page size -->
    <div class="mb-3">
        <label for="pageSizeSelect">Items per page: </label>
        <select id="pageSizeSelect" @onchange="ChangePageSize">
            <option value="10" selected="@(pageSize == 10)">10</option>
            <option value="25" selected="@(pageSize == 25)">25</option>
            <option value="50" selected="@(pageSize == 50)">50</option>
            <option value="100" selected="@(pageSize == 100)">100</option>
        </select>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Account ID</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in pagedResult.Items)
            {
                <tr>
                    <td>@account.FullName</td>
                    <td>@account.AccountId</td>
                    <td>@account.Balance</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <p>Showing @(pagedResult.Items.Count) of @pagedResult.TotalCount accounts</p>
        </div>
        <div>
            <button class="btn btn-secondary" disabled="@(currentPage == 1)" @onclick="PreviousPage">Previous</button>
            <span>Page @currentPage</span>
            <button class="btn btn-secondary" disabled="@(currentPage * pageSize >= pagedResult.TotalCount)" @onclick="NextPage">Next</button>
        </div>
    </div>

    <!-- Link back to homepage -->
    <div class="mt-3">
        <a href="/" class="btn btn-link">Back to Home</a>
    </div>
}

@code {
    private PagedResult<CustomerAccountAllDto> pagedResult;
    private int currentPage = 1;
    private int pageSize = 25;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        pagedResult = await Http.GetFromJsonAsync<PagedResult<CustomerAccountAllDto>>($"api/customers/show_all_accounts?page={currentPage}&pageSize={pageSize}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadAccounts();
        }
    }

    private async Task NextPage()
    {
        if (currentPage * pageSize < pagedResult.TotalCount)
        {
            currentPage++;
            await LoadAccounts();
        }
    }

    private async Task ChangePageSize(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        currentPage = 1; // Reset to first page when changing page size
        await LoadAccounts();
    }
}